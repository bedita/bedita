name: 'Run tests'

on:
  push:
    paths:
      - '**/*.php'

jobs:
  cs:
    name: 'Check coding style'
    runs-on: 'ubuntu-latest'
    container: 'chialab/php:7.4'

    steps:
      - name: 'Checkout current revision'
        uses: 'actions/checkout@v2'

      - name: 'Discover Composer cache directory'
        id: 'cachedir'
        run: 'echo "::set-output name=path::$(composer1 global config cache-dir)"'

      - name: 'Share Composer cache across runs'
        uses: 'actions/cache@v2'
        with:
          path: '${{ steps.cachedir.outputs.path }}'
          key: "composer-${{ github.job }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: |
            composer-${{ github.job }}-
            composer-

      - name: 'Install dependencies with Composer'
        run: 'composer1 install --prefer-dist --no-interaction'

      - name: 'Run PHP CodeSniffer'
        run: |
          vendor/bin/phpcs -n -p --extensions=php \
            --standard=vendor/cakephp/cakephp-codesniffer/CakePHP --ignore=/Migrations/,/Seeds/ \
            ./config ./src ./tests ./plugins/*/*/config ./plugins/*/*/src ./plugins/*/*/tests

  stan:
    name: 'Static code analyzer'
    runs-on: 'ubuntu-latest'
    container: 'chialab/php:7.4'
    continue-on-error: true

    steps:
      - name: 'Checkout current revision'
        uses: 'actions/checkout@v2'

      - name: 'Discover Composer cache directory'
        id: 'cachedir'
        run: 'echo "::set-output name=path::$(composer1 global config cache-dir)"'

      - name: 'Share Composer cache across runs'
        uses: 'actions/cache@v2'
        with:
          path: '${{ steps.cachedir.outputs.path }}'
          key: "composer-${{ github.job }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: |
            composer-${{ github.job }}-
            composer-

      - name: 'Install dependencies with Composer'
        run: 'composer1 install --prefer-dist --no-interaction && composer1 require --dev phpstan/phpstan'

      - name: 'Run PHP STAN'
        run: |
          vendor/bin/phpstan analyse --no-progress src plugins/BEdita/API/src plugins/BEdita/Core/src

  unit:
    name: 'Run unit tests'
    if: "!contains(github.event.commits[0].message, 'skip ci')"
    runs-on: 'ubuntu-latest'
    container: '${{ fromJson(matrix.php).image }}'

    strategy:
      fail-fast: false
      matrix:
        php:
          - '{"version": "7.2", "image": "chialab/php-dev:7.2", "coverage": true}'
          - '{"version": "7.3", "image": "chialab/php:7.3", "coverage": false}'
          - '{"version": "7.4", "image": "chialab/php:7.4", "coverage": false}'
        db:
          - '{"vendor": "SQLite", "dsn": "sqlite://tmp/test.sql", "image": "busybox", "options": ""}'
          - '{"vendor": "MySQL 5.6", "dsn": "mysql://bedita:bedita@db/bedita", "image": "mysql:5.6", "options": "--health-cmd \"mysqladmin ping -h localhost\" --health-interval 10s --health-timeout 5s --health-retries 5"}'
          - '{"vendor": "MySQL 5.7", "dsn": "mysql://bedita:bedita@db/bedita", "image": "mysql:5.7", "options": "--health-cmd \"mysqladmin ping -h localhost\" --health-interval 10s --health-timeout 5s --health-retries 5"}'
          # - '{"vendor": "MySQL 8.0", "dsn": "mysql://bedita:bedita@db/bedita?realVendor=mysql8", "image": "mysql:8.0", "options": "--health-cmd \"mysqladmin ping -h localhost\" --health-interval 10s --health-timeout 5s --health-retries 5"}'
          - '{"vendor": "MariaDB", "dsn": "mysql://bedita:bedita@db/bedita?realVendor=mariadb", "image": "mariadb:10", "options": "--health-cmd \"mysqladmin ping -h localhost\" --health-interval 10s --health-timeout 5s --health-retries 5"}'
          - '{"vendor": "PostgreSQL", "dsn": "postgres://bedita:bedita@db/bedita", "image": "postgres:13", "options": "--health-cmd \"pg_isready\" --health-interval 10s --health-timeout 5s --health-retries 5"}'
    env:
      PHP_VERSION: '${{ fromJson(matrix.php).version }}'
      DB_VENDOR: '${{ fromJson(matrix.db).vendor }}'
      db_dsn: '${{ fromJson(matrix.db).dsn }}'

    services:
      db:
        image: '${{ fromJson(matrix.db).image }}'
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_USER: 'bedita'
          MYSQL_PASSWORD: 'bedita'
          MYSQL_DATABASE: 'bedita'

          POSTGRES_USER: 'bedita'
          POSTGRES_PASSWORD: 'bedita'
          POSTGRES_DB: 'bedita'
        options: '${{ fromJson(matrix.db).options }}'

    steps:
      - name: 'Checkout current revision'
        uses: 'actions/checkout@v2'

      - name: 'Discover Composer cache directory'
        id: 'cachedir'
        run: 'echo "::set-output name=path::$(composer1 global config cache-dir)"'

      - name: 'Share Composer cache across runs'
        uses: 'actions/cache@v2'
        with:
          path: '${{ steps.cachedir.outputs.path }}'
          key: "composer-${{ fromJson(matrix.php).version }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: |
            composer-${{ fromJson(matrix.php).version }}-
            composer-

      - name: 'Install dependencies with Composer'
        run: 'composer1 install --prefer-dist --no-interaction'

      - name: 'Run PHPUnit'
        if: '!fromJson(matrix.php).coverage'
        run: 'vendor/bin/phpunit'

      - name: 'Run PHPUnit with coverage'
        if: 'fromJson(matrix.php).coverage'
        run: 'vendor/bin/phpunit --coverage-clover=clover.xml'

      - name: 'Export coverage results'
        if: 'fromJson(matrix.php).coverage'
        uses: 'codecov/codecov-action@v1'
        with:
          file: './clover.xml'
          env_vars: PHP,db_dsn
